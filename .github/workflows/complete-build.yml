---
name: "Complete Build"
# https://github.com/docker/build-push-action#complete-workflow

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*.*.*'
  pull_request:
  schedule:
    - cron: '0 10 * * *'  # everyday at 10am
  workflow_dispatch:
    inputs:
      remote-shell:
        description: "Break with remote shell"
        required: true
        default: true
env:
  IMAGE_NAME: felddy/weewx
  PLATFORMS: "linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,\
    linux/arm64,linux/ppc64le,linux/s390x"

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Repo metadata
        id: repo
        uses: actions/github-script@v3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data
      - name: Prepare
        id: prep
        run: |
          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION=test
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ];
              then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${IMAGE_NAME}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${IMAGE_NAME}:${MINOR},${IMAGE_NAME}:${MAJOR},${IMAGE_NAME}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${IMAGE_NAME}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Setup debug session remote shell
        uses: mxschmitt/action-tmate@v3
        if: github.event.inputs.remote-shell
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PW }}
      - name: Create cross-platform support Dockerfile-x
        run: ./buildx-dockerfile.sh
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile-x
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: "\
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}

            org.opencontainers.image.description=${{
              fromJson(steps.repo.outputs.result).description }}

            org.opencontainers.image.licenses=${{
              fromJson(steps.repo.outputs.result).license.spdx_id }}

            org.opencontainers.image.revision=${{ github.sha }}

            org.opencontainers.image.source=${{
              fromJson(steps.repo.outputs.result).clone_url }}

            org.opencontainers.image.title=${{
              fromJson(steps.repo.outputs.result).name }}

            org.opencontainers.image.url=${{
              fromJson(steps.repo.outputs.result).html_url }}

            org.opencontainers.image.version=${{ steps.prep.outputs.version }}"
