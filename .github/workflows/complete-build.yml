---
name: "Complete Build"
# https://github.com/docker/build-push-action#complete-workflow

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*.*.*'
  pull_request:
  schedule:
    - cron: '0 10 * * *'  # everyday at 10am
  workflow_dispatch:
    inputs:
      remote-shell:
        description: "Break with remote shell"
        required: true
        default: true
env:
  BUILDX_CACHE_DIR: ~/.cache/buildx
  IMAGE_NAME: felddy/weewx
  PIP_CACHE_DIR: ~/.cache/pip
  PLATFORMS: "linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,\
    linux/arm64,linux/ppc64le,linux/s390x"
  PRE_COMMIT_CACHE_DIR: ~/.cache/pre-commit

jobs:
  lint:
    name: "Lint sources"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Store installed Python version
        run: |
          echo "PY_VERSION="\
          "$(python -c "import platform;print(platform.python_version())")" \
          >> $GITHUB_ENV
      - name: Cache linting environments
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.PIP_CACHE_DIR }}
            ${{ env.PRE_COMMIT_CACHE_DIR }}
          key: "lint-${{ runner.os }}-py${{ env.PY_VERSION }}-\
            ${{ hashFiles('**/requirements-test.txt') }}-\
            ${{ hashFiles('**/requirements.txt') }}-\
            ${{ hashFiles('**/.pre-commit-config.yaml') }}"
          restore-keys: |
            lint-${{ runner.os }}-py${{ env.PY_VERSION }}-
            lint-${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade --requirement requirements-test.txt
      - name: Set up pre-commit hook environments
        run: pre-commit install-hooks
      - name: Run pre-commit on all files
        run: pre-commit run --all-files
  prepare:
    name: "Prepare variables"
    runs-on: ubuntu-latest
    outputs:
      created: ${{ steps.prep.outputs.created }}
      repometa: ${{ steps.repo.outputs.result }}
      tags: ${{ steps.prep.outputs.tags }}
      version: ${{ steps.prep.outputs.version }}
    steps:
      - name: Gather repo metadata
        id: repo
        uses: actions/github-script@v3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data
      - name: Calculate version, tags, and created timestamp
        id: prep
        run: |
          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION=test
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ];
              then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${IMAGE_NAME}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${IMAGE_NAME}:${MINOR},${IMAGE_NAME}:${MAJOR},${IMAGE_NAME}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${IMAGE_NAME}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=version::${VERSION}
      - name: Setup debug session remote shell
        uses: mxschmitt/action-tmate@v3
        if: github.event.inputs.remote-shell
  build-one:
    name: "Build test image"
    runs-on: ubuntu-latest
    needs: [prepare]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: image=moby/buildkit:buildx-stable-1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: ${{ env.BUILDX_CACHE_DIR }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Create dist directory
        run: mkdir -p dist
      - name: Build images
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          cache-from: type=local,src=${{ env.BUILDX_CACHE_DIR }}
          cache-to: type=local,dest=${{ env.BUILDX_CACHE_DIR }}
          context: .
          file: ./Dockerfile
          outputs: type=docker,dest=dist/image.tar
          tags: ${{ needs.prepare.outputs.tags }}
          labels: "\
            org.opencontainers.image.created=${{
              needs.prepare.outputs.created }}

            org.opencontainers.image.description=${{
              fromJson(needs.prepare.outputs.repometa).description }}

            org.opencontainers.image.licenses=${{
              fromJson(needs.prepare.outputs.repometa).license.spdx_id }}

            org.opencontainers.image.revision=${{ github.sha }}

            org.opencontainers.image.source=${{
              fromJson(needs.prepare.outputs.repometa).clone_url }}

            org.opencontainers.image.title=${{
              fromJson(needs.prepare.outputs.repometa).name }}

            org.opencontainers.image.url=${{
              fromJson(needs.prepare.outputs.repometa).html_url }}

            org.opencontainers.image.version=${{
              needs.prepare.outputs.version }}"
      - name: Compressing image
        run: gzip dist/image.tar
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist
  test:
    name: "Test image"
    runs-on: ubuntu-latest
    needs: [build-one]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache testing environments
        uses: actions/cache@v2
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: "test-${{ runner.os }}-\
            ${{ hashFiles('**/requirements-test.txt') }}-\
            ${{ hashFiles('**/requirements.txt') }}"
          restore-keys: |
            test-${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade --requirement requirements-test.txt
      - name: Download docker image artifact
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Load docker image
        run: docker load < dist/image.tar.gz
      - name: Prepare data volume mount
        run: |
          chmod a+rwx data
      - name: Generate test configuration
        run: docker-compose run weewx --gen-test-config
      - name: Run tests
        env:
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: pytest
      - name: Upload data artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: data
          path: data
  build-push-all:
    name: "Build and push all platforms"
    runs-on: ubuntu-latest
    needs: [prepare, test]
    if: github.event_name != 'pull_request'
    steps:
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PW }}
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: image=moby/buildkit:buildx-stable-1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: ${{ env.BUILDX_CACHE_DIR }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Create cross-platform support Dockerfile-x
        run: ./buildx-dockerfile.sh
      - name: Push images
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          cache-from: type=local,src=${{ env.BUILDX_CACHE_DIR }}
          cache-to: type=local,dest=${{ env.BUILDX_CACHE_DIR }}
          context: .
          file: ./Dockerfile-x
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ needs.prepare.outputs.tags }}
          labels: "\
            org.opencontainers.image.created=${{
              needs.prepare.outputs.created }}

            org.opencontainers.image.description=${{
              fromJson(needs.prepare.outputs.repometa).description }}

            org.opencontainers.image.licenses=${{
              fromJson(needs.prepare.outputs.repometa).license.spdx_id }}

            org.opencontainers.image.revision=${{ github.sha }}

            org.opencontainers.image.source=${{
              fromJson(needs.prepare.outputs.repometa).clone_url }}

            org.opencontainers.image.title=${{
              fromJson(needs.prepare.outputs.repometa).name }}

            org.opencontainers.image.url=${{
              fromJson(needs.prepare.outputs.repometa).html_url }}

            org.opencontainers.image.version=${{
              needs.prepare.outputs.version }}"
